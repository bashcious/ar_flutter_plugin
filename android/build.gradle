plugins {
    id "com.android.library"
    id "kotlin-android"
}

group 'io.carius.lars.ar_flutter_plugin'
version '1.0-SNAPSHOT'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
def kotlin_version = '1.7.10'

android {
    namespace 'io.carius.lars.ar_flutter_plugin'
    compileSdk = 30

    defaultConfig {
        minSdk = 24
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.ar:core:1.22.0"

    implementation 'com.google.ar.sceneform:core:1.15.0'
    implementation 'com.google.ar.sceneform:assets:1.15.0'
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.17.1'

    implementation 'com.google.android.gms:play-services-auth:16+'
    implementation 'androidx.appcompat:appcompat:1.3.0'

    compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm64/flutter.jar")
    compileOnly 'androidx.annotation:annotation:1.1.0'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.ar:core:1.22.0"

    implementation 'com.google.ar.sceneform:core:1.15.0'
    implementation 'com.google.ar.sceneform:assets:1.15.0'

    implementation 'com.google.android.gms:play-services-auth:16+'
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.17.1'
    implementation 'androidx.appcompat:appcompat:1.3.0'

    compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm64/flutter.jar")
    compileOnly 'androidx.annotation:annotation:1.1.0'
}

afterEvaluate {
    def containsEmbeddingDependencies = false
    for (def configuration : configurations.all) {
        for (def dependency : configuration.dependencies) {
            if (dependency.group == 'io.flutter' &&
                    dependency.name.startsWith('flutter_embedding') &&
                    dependency.isTransitive())
            {
                containsEmbeddingDependencies = true
                break
            }
        }
    }
    if (!containsEmbeddingDependencies) {
        android {
            dependencies {
                def lifecycle_version = "1.1.1"
                compileOnly "android.arch.lifecycle:runtime:$lifecycle_version"
                compileOnly "android.arch.lifecycle:common:$lifecycle_version"
                compileOnly "android.arch.lifecycle:common-java8:$lifecycle_version"
            }
        }
    }
}